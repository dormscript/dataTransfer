{
  "name": "Datatransfer",
  "tagline": "数据迁移框架",
  "body": "## 应用场景\r\n网站升级改版时，如果数据结构发生较大修改，就需要将数据从源数据库迁移到新的数据库，同时数据表名、字段名都需要较大修改。涉及到的修改包括：表名修改、字段名修改，字段内的数据格式转换，数据记录过滤（无效数据不再需要转换到新的数据表），多张表合并到一张表，一张表拆分为多张表。\r\n\r\n##解决的问题：\r\n* 封装数据迁移的公共部分\r\n* 数据迁移时的表、字段对应关系\r\n* 提供并行处理\r\n* 同步数据迁移过程中的增量数据变更（需要借助第三方工具）\r\n* 提供数据迁移后的后续操作，例如更新memcache缓存，通知第三方全文检索等\r\n* 提供简易的数据迁移进度查看界面，动态调整处理进程数\r\n\r\n##用到的技术：\r\n* PHP\r\n* Swoole\r\n\r\n##适用场景：\r\n* 将源数据库中的表迁移到新的数据库\r\n* 将源数据库中的表进行合并迁移到新数据库\r\n* 将源数据库中的数据按照一定规则处理后写到新的数据库\r\n* 将源数据库中的数据按照一定规则过滤，将过滤后的结果写到新的数据库\r\n\r\n##场景1用法介绍：\r\n将源数据库的user表迁移到新数据库的newUser.user表\r\n\r\n\t1：vim config.php，配置源、目标数据库的ip、用户名、密码\r\n\t2：进入Models目录，创建子目录，目录名为源数据库的库名\r\n\t3：进入新创建的目录，创建文件，格式为：{$tableName}.php\r\n\t4：内容见Models\\usercenter\\user.php\r\n\t5：设置需要多少个进程来处理数据迁移。vim config.php，配置setting\r\n\t5：进入根目录执行：  php main.php\r\n\r\n##场景2用法：\r\n将源数据库的user表、user_contact合并，迁移到新数据库的newUser.user表\r\n\r\n\t代码见user1.php\r\n##场景3、4用法：\r\n将源数据库的user表迁移到新数据库的newUser.user表，同时将sex字段的0改为男，1改为女。如果sex为其它值，不迁移此条记录\r\n\r\n\t代码见user2.php\r\n##callback的使用：\r\n\t代码见user2.php中的callback函数\r\n**需要注意：callback函数接收到的参数默认是源数据库中的记录。如果需要使用转换后的记录，需要一行设置：**\r\n\tpublic $callbackRow  = 'desc'; \r\n##附：fieldmap支持的格式：\r\n* 一对一\r\n\r\n\r\n\t\t'username' => 'username'\r\n\t\t说明：将源表的username字段原样转到新表的username字段\r\n\r\n* 一对一，格式转换\r\n\t\t\r\n\t\t'pid' => 'pid/getNewpid'\r\n\t\t说明：使用自定义函数将源表的pid字段转换后存入新表的pid字段\r\n\t\t例 ： \r\n\t\tpublic function getNewPid($p)\r\n\t    {\r\n\t        return ($p + 1000000001);\r\n\t    }\r\n\r\n* 一对一，格式转换、数据过滤\r\n\r\n\t\t'state'  => 'status/getStatus',\r\n\t\t说明：使用自定义函数getstatus处理status字段。\r\n\t\t如果getstatus函数返回值为false，当前记录会被忽略。返回其它值，将返回值存入新表\r\n\t\tpublic function getstatus () {\r\n\t\t\tif(in_array($status, 1,2,3)) {\r\n\t\t\t\t//只迁移状态为1、2、3数据\r\n\t\t\t\treturn $status;\r\n\t\t\t} else {\r\n\t\t\t\t//其它状态的数据不再迁移\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n* 多对一\r\n\r\n\t\t'prokey' => 'prokey,prokeyword/getkey',\r\n\t\t说明：将两个字段经过getkey函数处理后（返回值是字符串），存入新表的prokey字段\r\n* 多对多\r\n\t\t\r\n\t\t'cate1-cate2-cate3' => 'cate1,cate2,cate3/getCate',\r\n\t\t说明：getcate函数接收1个参数（数组），返回值为一个数组。\r\n* 将新表的字段设默认值\r\n\t\r\n\t\t'newfieldname' => '4/returnme',\r\n\t\r\n\t\t\r\n##其它用途：\r\n\t可以将此框架做为简单的并行读数据框架，callback中写自己需要做的事情。\r\n\t例：user3.php\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}